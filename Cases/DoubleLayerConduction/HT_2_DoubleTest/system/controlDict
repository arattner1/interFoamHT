/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interThermalFoam2;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         20;

deltaT          0.2E-3;

writeControl    adjustableRunTime;
writeInterval   1;


purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   10;

runTimeModifiable yes;

adjustTimeStep  off;

maxCo           0.25;
maxAlphaCo      0.25;
maxFourier      0.4;

// ************************************************************************** //
//Global vars for funky/groovy

functions
(
	DataSummary //Returns: time (s), dt (s), wall heat flux (W)
	{
		functionObjectLibs ("libutilityFunctionObjects.so");
		type coded;
		redirectType DataSummary;	
		outputControl timeStep;
		outputInterval 1;
		code		
		#{

			//***********************************************************************
			//First get t and dt
			scalar t = mesh().time().value();
			scalar dt = mesh().time().deltaTValue();
			//***********************************************************************

			//Some constants first:                 
			scalar k = 0.5;        //Liquid conductivity

			//***********************************************************************
			//Now get wall heat flux
			//Get mesh boundary
			const fvBoundaryMesh& bMesh = mesh().boundary();
			//Next get wall patch:
			label WallPatchID  = bMesh.findPatchID("Bot");
			const fvPatch& WallPatch = bMesh[WallPatchID];
			//Get temp gradient on the wall
			const volScalarField& T = mesh().lookupObject<volScalarField>("T");
			const surfaceScalarField SnGradT = fvc::snGrad(T);
			const scalarField GradTWall = SnGradT.boundaryField()[WallPatchID];
			const scalarField& Afs = WallPatch.magSf(); //Cell face areas
			
			

			//Average heat flux on lower half of wall:
			const scalar Q_Wall = gSum( WallPatch.magSf() * GradTWall * k )
			                    / gSum( Afs );
			//***********************************************************************
			
			//***********************************************************************
			//Finally print out results:
			//Now write out data:
			if( Pstream::master() == true )
			{
				std::ofstream fs;
				fs.open ("DataSummary.dat", std::fstream::app);
				fs.precision(8);
				fs << t << "\t" << dt << "\t" << Q_Wall << "\n" ;
				fs.close();
			}
			
			Info<<endl<<endl<<"Q_wall = " << Q_Wall << endl;
			//***********************************************************************

		#}; 

		codeInclude
		#{
			#include <fstream>
		#};
	}
);

libs ( "libsimpleSwakFunctionObjects.so"
       "libswakFunctionObjects.so"
       "libOpenFOAM.so"
       "libutilityFunctionObjects.so" 
       "libgroovyBC.so" );

// ************************************************************************* //

