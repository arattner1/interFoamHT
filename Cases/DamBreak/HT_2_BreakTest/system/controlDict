/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interThermalPhaseChangeFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         5;

deltaT          5E-5;
maxDeltaT       5E-4;

writeControl    adjustableRunTime;
writeInterval   0.2;
//writeControl    timeStep;
//writeInterval   20;


purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   10;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.25;
maxAlphaCo      0.25;
maxFourier      0.4;


// ************************************************************************** //
//Global vars for funky/groovy

functions
(
	DataSummary //Returns: time (s), dt (s), wall heat flux (W), phase-change heating rate (W), Liquid volume fraction (-),
	{
		functionObjectLibs ("libutilityFunctionObjects.so");
		type coded;
		redirectType DataSummary;	
		outputControl timeStep;
		outputInterval 1;
		code		
		#{

			//***********************************************************************
			//First get t and dt
			scalar t = mesh().time().value();
			scalar dt = mesh().time().deltaTValue();
			//***********************************************************************

			//***********************************************************************
			//Next, average vapor enthalpy
			const volScalarField alpha1 = mesh().lookupObject<volScalarField>("alpha.L");
			const volScalarField T      = mesh().lookupObject<volScalarField>("T");
			
			const scalar T_avg = gSum( mesh().V()*(1.0 - alpha1.internalField()) * T.internalField() ) / gSum( mesh().V()*(1.0 - alpha1.internalField()) );
			//***********************************************************************

			//***********************************************************************
			//Finally print out results:
			//Now write out data:
			if( Pstream::master() == true )
			{
				std::ofstream fs;
				fs.open ("DataSummary.dat", std::fstream::app);
				fs.precision(8);
				fs << t << "\t" << dt << "\t" << T_avg << "\n" ;
				fs.close();
			}
			//***********************************************************************

		#}; 

		codeInclude
		#{
			#include <fstream>
		#};
	}
);

libs ( "libsimpleSwakFunctionObjects.so"
       "libswakFunctionObjects.so"
       "libOpenFOAM.so"
       "libutilityFunctionObjects.so" 
       "libgroovyBC.so" );

// ************************************************************************* //

